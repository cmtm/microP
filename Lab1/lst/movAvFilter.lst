


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           moving_average_init
    3 00000000                 EXPORT           moving_average
    4 00000000         ; EXPORT moving_average_test
    5 00000000         
    6 00000000         ; d is the filter depth
    7 00000000 00000005 
                       d       EQU              5
    8 00000000         
    9 00000000         ; stSz is the size of the state struct in words
   10 00000000 00000008 
                       stSz    EQU              d + 3
   11 00000000         
   12 00000000         
   13 00000000         ; State Struct
   14 00000000         ; one word for "accumulated"
   15 00000000         ; one word for "yPrevious"
   16 00000000         ; one word for "tail"
   17 00000000         ; d words for circular buffer
   18 00000000         
   19 00000000         ; relative addresses
   20 00000000 00000000 
                       tail    EQU              0     * 4
   21 00000000 00000004 
                       circBuf EQU              (1)   * 4
   22 00000000 00000018 
                       accum   EQU              (d+1) * 4
   23 00000000 0000001C 
                       yPrevious
                               EQU              (d+2) * 4
   24 00000000         
   25 00000000         
   26 00000000         
   27 00000000         ; function just sets all the data to zero
   28 00000000         ; pointer to state struct is in r0
   29 00000000         moving_average_init
   30 00000000         ; prep registers
   31 00000000 F04F 0100       mov.W            r1, #0x00000000
   32 00000004 F04F 0207       mov.W            r2, #stSz - 1
   33 00000008         clearWord
   34 00000008         ; fill RAM with 0
   35 00000008 F840 1022       str              r1, [r0, r2, LSL #2]
   36 0000000C         ; decrement counter
   37 0000000C 1E52            subs             r2, r2, #1
   38 0000000E         ; repeat of there is more to do
   39 0000000E D5FB            BPL              clearWord
   40 00000010         ; set the tail pointer.
   41 00000010         ;add     r0, r0, #4
   42 00000010         ;str     r0, r0
   43 00000010 4770            BX               LR
   44 00000012         
   45 00000012         ; CONSIDER GETTING RID OF ACCUM, it's useless now!
   46 00000012         ; function where the moving average is actually computed
                       
   47 00000012         ; pointer to state struct is in r0
   48 00000012         ; new sample value is in s0
   49 00000012         moving_average
   50 00000012         ; fetch accum
   51 00000012 6981            LDR              r1, [r0, #accum]



ARM Macro Assembler    Page 2 


   52 00000014         ; increment if needed
   53 00000014 2905            cmp              r1, #d
   54 00000016 D002            BEQ              labelA
   55 00000018 F101 0101       add              r1, #1
   56 0000001C         ; store accum
   57 0000001C 6181            STR              r1, [r0, #accum]
   58 0000001E         labelA
   59 0000001E         ; fetch yPrevious
   60 0000001E EDD0 0A07       VLDR.32          s1, [r0, #yPrevious]
   61 00000022         ; fetch tail pointer, it's the first word of struct
   62 00000022 6802            LDR              r2, [r0]
   63 00000024         ; fetch tail value
   64 00000024 EB00 0102       ADD              r1, r0, r2
   65 00000028 ED91 1A00       VLDR.32          s2, [r1]
   66 0000002C         ; store new sample at tail pointer
   67 0000002C ED81 0A00       VSTR.32          s0, [r1]
   68 00000030         ; compute y New
   69 00000030 EE30 0A20       VADD.F32         s0, s0, s1
   70 00000034 EE30 0A41       VSUB.F32         s0, s0, s2
   71 00000038         ; move tail pointer
   72 00000038 1F12            SUBS             r2, r2, #4
   73 0000003A         ; gotta loop it around if needed
   74 0000003A D501            BPL              labelB
   75 0000003C F102 0214       ADD              r2, r2, #(d*4)
   76 00000040         labelB
   77 00000040         ; store computed y as yPrevious
   78 00000040 ED80 0A07       VSTR.32          s0, [r0, #yPrevious]
   79 00000044         ; store new tail pointer
   80 00000044 6002            STR              r2, [r0]
   81 00000046         ; Finally, divide y by accum to make average
   82 00000046         ; Here, I just divided by d to save some steps.
   83 00000046         ; it'll only effect a few values at the beginning.
   84 00000046 EEF1 0A04       VMOV.F32         s1, #5.0
   85 0000004A EE80 0A20       VDIV.F32         s0, s0, s1
   86 0000004E 4770            BX               LR
   87 00000050                 END
Command Line: --debug --xref --cpu=Cortex-M4.fp --apcs=interwork --depend=.\obj
\movAvFilter.d -o.\obj\movAvFilter.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS
\Include -IC:\Keil\ARM\Inc\ST\STM32F4xx --list=.\lst\movAvFilter.lst src\movAvF
ilter.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

clearWord 00000008

Symbol: clearWord
   Definitions
      At line 33 in file src\movAvFilter.s
   Uses
      At line 39 in file src\movAvFilter.s
Comment: clearWord used once
labelA 0000001E

Symbol: labelA
   Definitions
      At line 58 in file src\movAvFilter.s
   Uses
      At line 54 in file src\movAvFilter.s
Comment: labelA used once
labelB 00000040

Symbol: labelB
   Definitions
      At line 76 in file src\movAvFilter.s
   Uses
      At line 74 in file src\movAvFilter.s
Comment: labelB used once
moving_average 00000012

Symbol: moving_average
   Definitions
      At line 49 in file src\movAvFilter.s
   Uses
      At line 3 in file src\movAvFilter.s
Comment: moving_average used once
moving_average_init 00000000

Symbol: moving_average_init
   Definitions
      At line 29 in file src\movAvFilter.s
   Uses
      At line 2 in file src\movAvFilter.s
Comment: moving_average_init used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file src\movAvFilter.s
   Uses
      None
Comment: text unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

accum 00000018

Symbol: accum
   Definitions
      At line 22 in file src\movAvFilter.s
   Uses
      At line 51 in file src\movAvFilter.s
      At line 57 in file src\movAvFilter.s

circBuf 00000004

Symbol: circBuf
   Definitions
      At line 21 in file src\movAvFilter.s
   Uses
      None
Comment: circBuf unused
d 00000005

Symbol: d
   Definitions
      At line 7 in file src\movAvFilter.s
   Uses
      At line 10 in file src\movAvFilter.s
      At line 22 in file src\movAvFilter.s
      At line 23 in file src\movAvFilter.s
      At line 53 in file src\movAvFilter.s
      At line 75 in file src\movAvFilter.s

stSz 00000008

Symbol: stSz
   Definitions
      At line 10 in file src\movAvFilter.s
   Uses
      At line 32 in file src\movAvFilter.s
Comment: stSz used once
tail 00000000

Symbol: tail
   Definitions
      At line 20 in file src\movAvFilter.s
   Uses
      None
Comment: tail unused
yPrevious 0000001C

Symbol: yPrevious
   Definitions
      At line 23 in file src\movAvFilter.s
   Uses
      At line 60 in file src\movAvFilter.s
      At line 78 in file src\movAvFilter.s

6 symbols
343 symbols in table
