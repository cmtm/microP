= Final Report
Chris Morin




:!numbered:
== Abstract

We were asked to create an instrument using two wirelessly communicating boards. The details were up to us but we had to use certain features. We created a multimode synthesizer with motion controlled effects and an informative display.

:numbered:

== Problem Statement

We were required to create a musical instrument. This instrument had to use two boards communicating with each other wirelessly. We were required to use the accelerometer and the RTOS. We had to implement at least three "Special features" from a list. Besides this we were given creative freedom to do as wished.

== Introduction

We had two boards. One board recorded pitch and yaw and sent it wirelessly to the other board. The second board did most of the work. It had an LCD and a keypad connected to it. It would play one of two audio synthesizers (square wave or frequency modulation). The keypad would control the volume and pitch of the sound. It would also allow toggling between synthesizers. The pitch and yaw recieved from the wireless chip was used to control certain effects applied to the sound synthesised: the pitch would control resonance and the yaw would control low frequency cutoff. The LCD display would display the volume, the note, the synth mode and the pitch/yaw.

The three "Special features" we implemented were:

* Add a character LCD
* Add some cool or interesting audio effects
* Implement some more advanced synthesis techniques

== Task Division

The most time consuming part of microprocessor labs has always been learning how to work with the new systems/periferal. In our design we used two new peripherals, the keypad and the LCD, and one new system, the DAC. We were a group of 5 and decided to break up the work as so:

Chris Morin::
	Top level architecture and logic programming. Legacy code integration
	
Alex Boudon::
	DAC operation and DMA double buffering.

Riham Bichri::
	LCD operation.
	
Robert Klein::
	Audio generation and effects.

Alison Liu::
	Keypad operation.
	
This division made it so that each team member could focus on their part without being dependant on others. Each member was responsible for the research, implementation and testing of their part in isolation from the rest. Once everyone had completed their part, they sent it to Chris Morin who glued it together and brought in the legacy code from previous labs that handled the accelerometer and wireless chip. He did some final testing to make sure eveything worked together as expected.


== Theory

Here we will detail the theory we needed to operate the systems/periferals. We'll also cover the signal processing theory.

==== Accelerometer
The LIS302DL is a 3-axis linear accelerometer. It returns a digital value representing static forces caused by a constant force like gravity, or dynamic ones like moving or vibrating the accelerometer. The accelerometer includes a sensing element and an IC interface that provides accelerations through I2C/SPI serial interface. The stm32f4_discovery_lis302dl library is used to configure the parameters of the device.

The LIS302DL is capable of measuring output data rates at 100 and 400 Hz and has dynamically user selectable full scales that have the following typical values: ± 2.3g and ±9.2g. The user can select which axis he wants to read the acceleration from. Additionally, a self test capability allows the user to check the functioning of the sensor in the final application.

The device may be configured to generate interrupt signals when a programmable threshold is crossed in at least one of the three axes. The user can select between a latched and unlatched interrupt request selection. A time limit can be set to determine how long a threshold is sensed before an interrupt is signalled. Additionally, an option is provided to enable single or double tap detection in each direction. 

==== Acceleration to Angle Conversion

Tilt angles are used to describe how the accelerometer is oriented in 3D space relative to a global XYZ frame. The XY plane is horizontal to the earth, and the Z plane is perpendicular to it. When rotated around this frame, the accelerometer changes angles with respect to the coordinate system. We will refer to these angles as roll (between the X axis and the horizontal plane), pitch (between the Y axis and the horizontal plane) and yaw (with respect to the Z axis). <<angle_imgA>> shows these angles and <<angle_imgB>> shows our chosen positive XYZ direction on the STM32F4DISCOVERY board. Note that yaw cannot be detected because gravity force does not depend on it[1].

[[angle_imgA]]
.Yaw (beta), Pitch (gamma) and Roll (alpha)
image::images/anglesA.jpg[]

[[angle_imgB]]
.Positive roll, yaw, and pitch on our board
image::images/anglesB.jpg[]

By measuring the static acceleration due to gravity, we can find out the angle of the device. Equations <<Eq1>> and <<Eq2>> [4] allow us to convert the acceleration detected in each direction into a tilt angle.

[[Eq1, 1]]
.Equation 1
latexmath:[$\alpha = \arctan \left( \frac{\alpha_X}{ \sqrt{\alpha_Y^2 + \alpha_Z^2} } \right) $]

[[Eq2, 2]]
.Equation 2
latexmath:[$\alpha = \arctan \left( \frac{\alpha_Y}{ \sqrt{\alpha_X^2 + \alpha_Z^2} } \right) $]

Equations <<Eq1>> and <<Eq2>> return angles between -90 and 90 degrees. Figure 2 shows how a range of -180 to 180 can be obtained. Depending on the direction of the board, the angles obtained from Equations <<Eq1>> and <<Eq2>> can be used in Equations <<Eq3>> to <<Eq6>> to modify the range.

[[Eq3, 3]]
.Equation 3
latexmath:[$ if (z < 0 and x < 0): roll = -(roll + 180) $]

[[Eq4, 4]]
.Equation 4
latexmath:[$ if (z < 0 and x > 0): roll = 180 - roll $]

[[Eq5, 5]]
.Equation 5
latexmath:[$ if (z < 0 and y < 0): roll = -(pitch + 180) $]

[[Eq6, 6]]
.Equation 6
latexmath:[$ if (z < 0 and x > 0): roll = 180 - pitch $]

==== Timer
4 general purpose timers are available and consist of auto-reload counters driven by a programmable prescaler (TIM2 to TIM5). TIM3 is a 16-bit auto-reload counter and is used to control the interval of the accelerometer readings.

Functions to access the timer settings are available in the stm32Fxx library. The timer has a parameter which allows it to be an up or a down counter. A down counter was used in this lab meaning that the timer will generate an event upon hitting zero and will then reload an initial value. Every time this happens, an interrupt occurs. A 16 bit programmable prescaler is used to divide the counter clock frequency to reduce the tick rate of the timer[6].

==== Audio peripheral

The STM32 has onboard audio capability with the CS43L22 audio DAC with integrated class D speaker driver [User manual p.17]. The Audio DAC has three ways that it can output a signal, we chose to use the I2S protocol. The signal is output through the audio mini Jack, this signal can be feed into headphones or loud speakers depending on configuration. The class D amp is well suited to converting the byte stream of samples to voltage a signal as it is essentially a pulse generator.  The audio sampling frequency can be set to 48kHz, 96kHz or 192kHz for increasing resolution of higher frequencies. The bit rate to serve these audio sample rates is generated by the I2S clock and is calculated specially for the 16bit and 32bit sample size  [Reference manual p709]. The ADC can generate stereo in 16bit and 32bit.

The ADC has no buffer or FIFO thus a buffers in main memory must be used. The Data is transferred via SPI using a DMA stream. The I2S protocol sets the rate of transfer over the SPI lines to meet the exact needs of the ADC. CS43L22 is connected to SPI3 and hence serviced uniquely by DMA1 streams 5 and 7.


==== Keypad

The keypad peripheral has four rows and 3 columns of buttons and uses 8 pins which are attached to the GPIO ports of the ST board. Four of those pins correspond to each row, three to each column, and one to ground. When a button is pressed, the pin corresponding to the row and column of the button will generate a low signal. If a button is not pressed, the pin corresponding to the row and column of the button will generate a high signal.


==== LCD

TODO



==== Singal processing theory

TODO

== Specification

TODO

== Implementation

=== Development process

The required structure of this project shared much in common with lab 6 so we decided to use that as a starting point. After modifying the main program loop from lab 6 to suit our needs, we worked on configuring the peripherals and reading from/writing to them. We then needed to get a double buffered DMA stream writing to the DAC. Our first designed had timing issues as the time it took to set the LCD screen was longer than the time to write an audio buffer. Our first desgined had all periferal IO and audio synthesis occur on a single loop iteration while the DMA wrote a buffer to the DAC. Since the time to write the LCD was longer than the time taken for the DMA to write a buffer, the program couldn't keep up and the DMA would crash. To remedy this, we designed a second program that put the LCD writing in it's own thread. The value to be written to the LCD were updated on every loop iteration but the actual printing occured at it's own pace.

==== The accelerometer

The accelerometer’s power mode is set to active in order to turn on the device. The data rates at which acceleration samples can be produced are 100Hz and 400 Hz. For the purpose of this lab, a 100 Hz data rate was chosen. Because this lab requires a sampling of 100 Hz through the timer, it is unnecessary to consume additional power for a more frequent sampling rate. All axes were configured since all 3 accelerations are needed to determine the tilt angles. The LIS302DL has dynamically user selectable full scale measurement range of +-2.3g and +-9.2g. We chose a +-2.3g range since we are only concerned with static acceleration. Moreover, a lower range is associated with more accurate readings. A self-test capability allows the user to check the functioning of the sensor without moving it. In this lab, we turn off this functionality since it isn’t necessary.


==== Timer

The timer has its own clock that must be enabled before being used (the APB1 clock). The structure allows us to choose a prescaler value (integer clock divider to reduce the tick rate of the timer) as well as a reload value (timer generates an event upon hitting zero and reloads some initial value). The period was calculated by dividing the APB1 clock by a prescaler and the desired frequency of the timer as seen in Equation <<Eq7>>. 

[[Eq7, 7]]
.Equation 7
latexmath:[$ Period = \left( \frac{f_PCLK1}{Prescaler * frequency} \right) - 1 $]

The prescaler and period specified as parameters must be between 0x0000 and 0xFFFF. Because of this, we chose our prescaler to be 42,000. The APB1 clock operates at a frequency of about 42Mhz giving us a value of 1000 for the counter. This means that one second is equivalent to when the counter counts down from 1000 to zero. We then divide 1000 by the desired frequency. The frequency specified for this lab is 100 Hz, so dividing 1000 by 100 gives us 10. This means that the counter must count down to one hundredth of a 1000at each tick. We finally subtract 1 from this value because of the off by 1 issue. We want to get n decrements rather than n+1 seeing that the timer must count all the way down to zero. 
The TIM update Interrupt source is checked to determine when the down counter reaches zero. If the bit status is set (meaning an interrupt has occurred), the interrupt pending bit is cleared so that the system is ready to wait for the triggering of another interrupt rather than staying in the interrupted state. 


=== Audio peripheral

Our Driver was built on top of the of the existing codec driver supplied by ST. The top level initialization structure available to outside modules initializes DMA1  stream 7 and SPI3 for circular double-buffer transfer of mono 16bit audio samples at 48kHz. An interrupt handler is also initialized for stream 7 which fires as soon as one of the buffers has been emptied. This interrupt is used by the DSP to trigger processing. Within the initialization method low level functions are called to initialize the Codec,  GPIO pins, ADC registers, clock rates and global volume is  set. Our system begins to play immediately from the two buffer handed to it during initialization, no further call is required to play sound. These buffers can be of any length, granted they are long enough that the DSP can outpace the DMA.  

=== Keypad

==== Setup

To implement the keypad with full 12 keys, all 8 keypad pins are connected to free GPIO ports C and D. This information is found on page 20 of the STM32F4 DISCOVERY user manual. The detail keypad pin configuration is in <<keypadTable>>  and <<keypadPic>>  below:

TODO: INSERT 2 PICS

==== Scanning technique

To detect which key is pressed, the keypad is scanning using a scanning algorithm. 

At keypad initialization, the row GPIO pins are set to output while the column GPIO pins are set as inputs. This causes the output rows to be set to logic 0 and allows only the column GPIO pins to be read. 

The procedure to identify which button of a keypad has been pressed is as follows:

. All column line inputs are checked for logic 0 to see if a button is pressed. If no button is pressed, all column line inputs will be read as logic 1 due to the action of the weak pull-up resistors. In this case, the getKeyStatus() function returns “NOKEY”. If a key is pressed, we record the pressed key column and proceed to step 2.
. At this step, we swap the row/column GPIO configuration. In other words, the row GPIO pins are set to input while the column GPIO pins are set as outputs. This causes the output columns to be set to logic 0 and allows only the row GPIO pins to be read.
. All row line inputs are checked for logic 0 to see in which is the button pressed and we record the pressed key column.
. At this step, we swap the row/column GPIO configuration. In other words, the row GPIO pins are set to output while the column GPIO pins are set as inputs to get ready for the next function call.
. The key number is calculated using a simple equation (pressRow-1)*3 + pressColumn and converted into an enum for readability. 

==== Hardware limitations and Simplifications

We investigated in the possibility of allowing multiple keys presses. This would allow multiple notes to be played at the same time. In that case, the scanning algorithm would read that keys from rows 1 and 2 and columns 1 and 2 were pressed. In this case, the keypad pins could not tell if keys 2 and 4 were pressed or keys 1 (row 1 and column 1) and 5 (row 2 and column 2) were pressed. A solution would have been to turn one pin on at a time and then see what pins are on, but this was not worth the trouble for us as we weren't intending on implementing multi-note audio synthesis.

==== Future Work

If given more time, another feature that we would implemented is the ability to not only sustain a note when holding the key but also to reduce the sound as the duration of the key pressed gets longer, a feature observed in a commercial electric piano. 

==== Additional implementation notes

To make the project integration easier, checking for the key pressed is done using one function getKeyStatus() that calls other methods. This way, other team members would not need to understand the details of the keypad implementations before integrating the peripheral into the whole system. In the case that a keypad GPIO pins is modified, one simply needs to slightly modified the header file.

=== LCD

TODO

=== Signal processing

TODO

=== Program Organization and Flow

==== First Board

The first board just pumped out pitch and yaw data to the wireless chip. It was quite simple and consisted of two threads: one for the main loop and accelerometer calculation and the other for wireless transmission.  The program flow is as in <<flowchart1>>.

[[flowchart1]]
.First Board Program Flow
image::images/firstFlowchart.png[]

==== Second Board

The second board is in charge of most of the work. It has three regular threads and 3 interupt handlers.

The threads are:

* main (generate audio and read keypad)
* wireless
* LCD

The program flow, with the interrupt handlers removed, is as in <<flowchart2>>.

[[flowchart2]]
.Second Board Program Flow
image::images/secondFlowchart.png[]

== Verification

=== Timer

We set the timer period to trigger interrupts at a frequency of 1Hz. This was so we could validate our period equation as validating a frequency of 100Hz required very fast fingers on the stop watch. We got some strange results and our timer was initially going four times too fast. We were aware of various problems groups had with the timer, but even after looking at the documentation and finding the relevant clocks and referencing their values from the libraries directly, our timer was too fast by a factor of 1.5. After hours of trials and sifting through documentation, we decided to put a fudge factor in our equation and leave it at that. Once this was fixed, we got a very stable interrupt frequency. We tested the interrupt frequency at 100 Hz by incrementing a counter at each interrupt and measuring the time elapsed after 1000 interrupts. This should have taken 10 seconds and we measured 10.2.

Another way to test the running time of the timer was to break in the code and see how much time has elapsed. This method gave us garbage values. We suspect that the TIM3 timer being an external hardware timer made it not play nice with the debugger.

=== Audio peripheral

We want to test the rate of the DMA transfer over the SPI3 line is it in fact running at 48kHZ as specified. This is important for the proper rendering of sound.

While running the program and playing sound we placed an oscilloscope probe on the master clock pin of SPI3 GPIOC  pin 7 and read the frequency we obtained a value hovering around 48kHz.  The actual value fell at 47990Hz which is 0.0186% error which would be imperceptible to the human ear.


=== LCD

TODO

=== Signal Processing

TODO

=== Thread flow

We used keil's event recording mode to ensure that no threads were busy waiting. As can be seen in <<eventDiagram>>, most of the time is spent in idle mode so the threads are yielding properly.

[[eventDiagram]]
.Event Viewer recording of our program running
image::images/eventDiagram.png[]

=== Overall program

The program as a whole was testing by using it in it's intended purpose and playing it. The keypad buttons were pushed and we ensured that the proper sound was produced and the LCD display changed accordingly. We testing each mode of opertion for all ranges of pitch/yaw and volume. In doing this, we detected a few bugs that were quickle corrected. One of them was that the filters weren't being applied to the audio. This was evident in testing as the audio didn't change with varying board angles.

We then just jammed on the board to test it. This is called constrained random verification.

== Code

TODO: LOL


== Conclusion

TODO:
